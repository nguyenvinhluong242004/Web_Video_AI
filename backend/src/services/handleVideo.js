import ffmpegInstaller from '@ffmpeg-installer/ffmpeg';
import ffmpeg from 'fluent-ffmpeg';
import fs from 'fs';
import path from 'path';

ffmpeg.setFfmpegPath(ffmpegInstaller.path);

// T·∫°o clip t·ª´ ·∫£nh + text
async function createVideoSegments(images, scripts, durations) {
  const promises = images.map((image, index) => {
    const duration = durations[index];
    const text = scripts[index].replace(/:/g, '\\:');
    const output = `clip_${index}.mp4`;

    return new Promise((resolve, reject) => {
      ffmpeg()
        .input(image)
        .loop(duration)
        .videoCodec('libx264')
        .outputOptions([
          '-vf',
          `drawtext=text='${text}':fontsize=32:fontcolor=white:x=(w-text_w)/2:y=h-100:box=1:boxcolor=black@0.5:boxborderw=10`,
          `-t ${duration}`
        ])
        .noAudio()
        .save(output)
        .on('end', () => resolve(output))
        .on('error', (err) => {
          console.error('‚ùå L·ªói khi t·∫°o clip:', err);
          reject(err);
        });
    });
  });

  return Promise.all(promises);
}

// N·ªëi c√°c clip l·∫°i th√†nh m·ªôt video
async function concatVideoSegments(videoPaths) {
  const listFile = 'video_list.txt';
  const content = videoPaths.map(file => `file '${path.resolve(file)}'`).join('\n');
  fs.writeFileSync(listFile, content);

  return new Promise((resolve, reject) => {
    ffmpeg()
      .input(listFile)
      .inputOptions(['-f', 'concat', '-safe', '0'])
      .videoCodec('libx264')
      .output('temp_video.mp4')
      .on('end', () => resolve('temp_video.mp4'))
      .on('error', (err) => {
        console.error('‚ùå L·ªói khi n·ªëi video:', err);
        reject(err);
      })
      .run();
  });
}

// Gh√©p video v·ªõi audio
async function mergeWithAudio(videoPath, audioPath, outputPath = 'final_output.mp4') {
  return new Promise((resolve, reject) => {
    ffmpeg()
      .input(videoPath)
      .input(audioPath)
      .outputOptions(['-c:v copy', '-c:a aac', '-shortest'])
      .save(outputPath)
      .on('end', () => resolve(outputPath))
      .on('error', (err) => {
        console.error('‚ùå L·ªói khi gh√©p video v·ªõi √¢m thanh:', err);
        reject(err);
      });
  });
}

// G·ªçi to√†n b·ªô qu√° tr√¨nh
async function createFullVideo(images, scripts, durations, audioPath, outputPath = 'final_output.mp4') {
  try {
    console.log('üîπ ƒêang t·∫°o t·ª´ng clip t·ª´ ·∫£nh...');
    const clips = await createVideoSegments(images, scripts, durations);

    console.log('üîπ ƒêang n·ªëi c√°c clip l·∫°i...');
    const mergedVideo = await concatVideoSegments(clips);

    console.log('üîπ ƒêang gh√©p v·ªõi √¢m thanh...');
    const finalOutput = await mergeWithAudio(mergedVideo, audioPath, outputPath);

    console.log('‚úÖ Video ƒë√£ ho√†n th√†nh:', finalOutput);
    // X√≥a t·ªáp t·∫°m sau khi t·∫°o xong
    clips.forEach(file => fs.unlinkSync(file));
    fs.unlinkSync(mergedVideo);
    fs.unlinkSync('video_list.txt'); // X√≥a t·ªáp danh s√°ch

    return finalOutput;
  } catch (err) {
    console.error('‚ùå L·ªói t·∫°o video:', err);
    throw err;
  }
}

// Export c√°c h√†m
export {
  createFullVideo,
  createVideoSegments,
  concatVideoSegments,
  mergeWithAudio
};
